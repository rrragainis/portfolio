version: '3.8'

services:
  # Frontend service with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - BACKEND_URL=http://backend:8000
      - PORT=80
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - backend
    restart: always

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY:-base64:randomkey1234567890}
      - APP_URL=http://backend:8000
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-portfolio}
      - DB_USERNAME=${DB_USERNAME:-portfolio}
      - DB_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - ./backend:/var/www/html
      - /var/www/html/vendor
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database service
  db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=${DB_DATABASE:-portfolio}
      - MYSQL_USER=${DB_USERNAME:-portfolio}
      - MYSQL_PASSWORD=${DB_PASSWORD:-password}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-rootpassword}
    volumes:
      - dbdata:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 5s
      retries: 10

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
